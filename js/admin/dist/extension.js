'use strict';

System.register('recallfx/sitemap/components/SitemapSettingsModal', ['flarum/components/SettingsModal'], function (_export, _context) {
  "use strict";

  var SettingsModal, SitemapSettingsModal;
  return {
    setters: [function (_flarumComponentsSettingsModal) {
      SettingsModal = _flarumComponentsSettingsModal.default;
    }],
    execute: function () {
      SitemapSettingsModal = function (_SettingsModal) {
        babelHelpers.inherits(SitemapSettingsModal, _SettingsModal);

        function SitemapSettingsModal() {
          babelHelpers.classCallCheck(this, SitemapSettingsModal);
          return babelHelpers.possibleConstructorReturn(this, (SitemapSettingsModal.__proto__ || Object.getPrototypeOf(SitemapSettingsModal)).apply(this, arguments));
        }

        babelHelpers.createClass(SitemapSettingsModal, [{
          key: 'className',
          value: function className() {
            return 'SitemapSettingsModal Modal--small';
          }
        }, {
          key: 'title',
          value: function title() {
            return 'Sitemap Settings';
          }
        }, {
          key: 'form',
          value: function form() {
            var id = this.setting('recallfx.sitemap.id', 0) + 1;

            return [m(
              'div',
              { className: 'Form-group' },
              m(
                'label',
                null,
                app.translator.trans('recallfx-sitemap.admin.title')
              ),
              m(
                'p',
                null,
                app.translator.trans('recallfx-sitemap.admin.text'),
                ' = ',
                id
              ),
              m('input', { type: 'hidden', className: 'FormControl', value: id })
            )];
          }
        }]);
        return SitemapSettingsModal;
      }(SettingsModal);

      _export('default', SitemapSettingsModal);
    }
  };
});;
'use strict';

System.register('recallfx/sitemap/main', ['flarum/extend', 'flarum/app', 'oberlo/oberloheader/components/SitemapSettingsModal'], function (_export, _context) {
  "use strict";

  var extend, app, SitemapSettingsModal;
  return {
    setters: [function (_flarumExtend) {
      extend = _flarumExtend.extend;
    }, function (_flarumApp) {
      app = _flarumApp.default;
    }, function (_oberloOberloheaderComponentsSitemapSettingsModal) {
      SitemapSettingsModal = _oberloOberloheaderComponentsSitemapSettingsModal.default;
    }],
    execute: function () {

      // this name is automatically generated by flarum
      app.initializers.add('recallfx-sitemap', function (app) {
        app.extensionSettings['recallfx-sitemap'] = function () {
          return app.modal.show(new SitemapSettingsModal());
        };
      });
    }
  };
});